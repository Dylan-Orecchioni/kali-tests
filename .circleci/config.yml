# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/jobs-steps/#jobs-overview & https://circleci.com/docs/configuration-reference/#jobs
jobs:
  say-hello:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/executor-intro/ & https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      # Specify the version you desire here
      # See: https://circleci.com/developer/images/image/cimg/base
      - image: cimg/base:current

    # Add steps to the job
    # See: https://circleci.com/docs/jobs-steps/#steps-overview & https://circleci.com/docs/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/workflows/ & https://circleci.com/docs/configuration-reference/#workflows
workflows:
  say-hello-workflow: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - say-hello
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs

jobs:
  build:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      # Specify the docker image for the job
      - image: cimg/php:8.2.4
      - image: cimg/mariadb:10.4.21

    steps:
      # Récupération du code source depuis le dépôt Git
      - checkout
      
      # Installation des dépendances requises par PHP
      - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      - run: sudo docker-php-ext-install zip

      # Récupération et restauration du cache de dépendances
      # Le cache de dépendances est une fonctionnalité de CircleCI (et d'autres outils similaires) qui permet de stocker temporairement des fichiers ou des artefacts générés par une tâche ou un processus, afin d'accélérer les builds ultérieurs.
      - restore_cache:
          keys:
            # Clé de cache correspondant au fichier composer.json
            - v1-dependencies-{{ checksum "composer.json" }}
            # Clé de cache par défaut (en cas de non-correspondance avec la clé précédente)
            - v1-dependencies-
      
      # Installation des dépendances avec Composer
      - run:
          name: "Install Dependencies"
          command: composer install -n --prefer-dist # Pas de questions interactives et téléchargement depuis les distributions (ex: zip) plutôt que via les référentiels de contrôle de version (plus rapide et plus stable).
      
      # Sauvegarde du cache de dépendances
      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor
 
      # Exécution des tests avec PHPUnit
      - run:
          name: "Run tests"
          command: composer tests
